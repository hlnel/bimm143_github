---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Helen Le (PID: A16300695)"
format: pdf
---

# 3. Import countData and colData

The data for this hands-on session comes from a published RNA-sez experiement where airway smooth muscle cells were treated with **dexamethasone** (dex)
```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
head(metadata)
```

**Q1. How many genes are in this dataset?**
```{r}
dim(counts)
```
There are 38694 genes in this dataset.

**Q2. How many ‘control’ cell lines do we have?**
```{r}
sum(metadata$dex == "control")
```
There are 4 'control' cell lines in this data set.

# 4. Toy differential gene expression

Let's calculate the mean counts per gene (from the metadata) in the "control" samples. We can use this to compare the value for each gene to the mean counts in the "treated" samples.

**Q3. How would you make the above code in either approach more robust? Is there a function that could help here?**
rowSums could help here.

- Step 1. Find which columns in `counts` correspond to "control" samples.
```{r}
head(counts)
```

```{r}
control.inds <- metadata$dex == "control"
metadata[control.inds,]
```
```{r}
control.counts <- counts[,control.inds]
head(control.counts)
```


- Step 2. Calculate the mean value per gene in these columns.
- Step 3. Store this as a vector for later use (labeled `control.mean`)
```{r}
# apply(control.counts, 1, mean)
control.mean <- rowMeans(control.counts)
```

**Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)**
For the treated samples:
- Step 1.
```{r}
treated.inds <- metadata$dex == "treated"
metadata[treated.inds,]
```
```{r}
treated.counts <- counts[,treated.inds]
head(treated.counts)
```
- Step 2 & 3.
```{r}
treated.mean <- rowMeans(treated.counts)
```

Or, a shorter way to write this is:
```{r}
treated.mean <- rowMeans( counts[, metadata$dex == "treated"])
```

To keep this tidy, let's put `control.mean` and `treated.mean` vectors together as two columns of a new data frame.
```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

```{r}
head(meancounts)
```
**Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.**
```{r}
plot(meancounts)
```

**Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?**
The geom_point() function would be used for this plot.

Let's plot this using ggplot:
```{r}
library(ggplot2)
```

```{r}
ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  # Make the points transparent since so many sample points are overlapping
  geom_point(alpha=0.2)
```

**Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?**
The `log=""` argument allows this to be done in plot().
```{r}
plot(meancounts, log="xy")
```

For ggplot, this can be done with `scale_x_continuous(trans="log2")` and `scale_y_continuous(trans="log2")`.
```{r}
ggplot(meancounts) +
  aes(control.mean, treated.mean) +
  geom_point(alpha=0.2) +
  scale_x_continuous(trans="log2") +
  scale_y_continuous(trans="log2")
```

Log transformations are super useful when our data is skewed and measured over a wide range like this. We can use different log transformations like base10 or natural logs but we most often prefer log2 units.
- Makes the math and interpretation much easier.

```{r}
# Control/Treated
log2(10/10)
```

What if there was a doubling?
```{r}
# Treated/control
log2(20/10)
```

Half counts
```{r}
log2(10/20)
```

```{r}
log2(40/10)
```
vs.
```{r}
log10(40/10)
```

Let's add a log2 fold-change column to our `meancounts` data.frame.
```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```

There are some odd results. Let's remove these genes.
```{r}
to.rm.inds <- rowSums(meancounts[,1:2] == 0) > 0
mycounts <- meancounts[!to.rm.inds,]
```
The `!` mark lips TRUE values to FALSE and vice-versa...

```{r}
dim(mycounts)
```

```{r}
head(mycounts)
```

In the lab sheet, the following code is used:
```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

**Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?**
The arr.ind argument in the `which()` function returns both the column and row indices where there are `TRUE` values.

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2.

Let's filter the dataset both ways to see how many genes are up or down-regulated.
```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

**Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?**
```{r}
sum(up.ind)
```
There are 250 up-regulated genes at the greater than 2 fc level.

**Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?**
```{r}
sum(down.ind)
```
There are 367 down-regulated genes at the lower than -2 fc level.

**Q10. Do you trust these results? Why or why not?**
No; We haven't considered statistical significance (i.e., p-value), so it is currently hard to determine if the differences in the data are significant. Without statistical significance in mind, these results can be misleading.

But, we forgot all about statistical significance of these differences...

We will use the DESeq2 package to do this analysis properly...

# Using DESeq2

Like any package, we must load it up with a `library()` call.
```{r}
library(DESeq2)
```

Setup the input object required by DESeq:
```{r}
dds <- DESeqDataSetFromMatrix(countData= counts, 
                       colData= metadata, 
                       design = ~dex)
```

Now we can run our DESeq analysis:
```{r}
dds <- DESeq(dds)
```

Get our results back from the `dds` object:
```{r}
res <- results(dds)
head(res)
```

# A summary results plot

Volcano plot.
This is a common type of summary figure that keeps both our inner biologist and inner nerd happy because it shows both P-values and log2(Fold-Changes).

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=2, col="red")
abline(v=-2, col="red")
abline(h=-log(0.05), col="blue")
```

```{r}
log(0.1)
log(0.00001)
```
We did  `-log()` since we care about the results with low adjusted p-values.
- this removes large values we don't care about and flips the plot for better legibility.

Let's make a prettier plot using ggplot:
```{r}
# Let's setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[abs(res$log2FoldChange) > 2]  <- "red" 
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[inds] <- "blue"

# Create a data frame to use for ggplot
res_df <- data.frame(res$log2FoldChange, res$padj)

ggplot(res_df) +
  aes(res$log2FoldChange, -log(res$padj)) +
  geom_point(alpha=0.5, col=mycols) +
  labs(y="-Log(P-value)", x="Log2(FoldChange)") +
  geom_vline(xintercept=c(-2,2), col="red") +
  geom_hline(yintercept=-log(0.5), col="blue")
```


Save our results to date...
```{r}
write.csv(res, file="deseq_results.csv")
```

# 8. Adding annotation data

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

The main function we will use here is called `mapIds()`.

Our current IDs are here:
```{r}
head(row.names(res))
```
These are in ENSEMBL format. I want "SYMBOL" ids:

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
head(res)
```

Let's add GENENAME
```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), 
                     keytype="ENSEMBL",       
                     column="GENENAME",      
                     multiVals="first")
head(res)
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), 
                     keytype="ENSEMBL", 
                     column="ENTREZID",  
                     multiVals="first")
```

## Pathway analysis

We will use the **gage** package along with **pathview** here to do geneset enrichment (a.k.a. pathway analysis) and figure generation respectively.

```{r}
#/ message: false
library(pathview)
library(gage)
library(gageData)
```

Let's have a peek at the first two pathways in KEGG:
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2) 
```

What we need for `gage()` is our genes in ENTREZ id format with a measure of their importance.

It wants a vector of e.g. fold-changes.

```{r}
foldchanges <- res$log2FoldChange
head(foldchanges)
```

Add ENTREZ ids as `names()` to my `foldchanges` vector.
```{r}
names(foldchanges) <- res$entrez
head(foldchanges)
```

```{r}
keggres <- gage(foldchanges, gsets=kegg.sets.hs)
```


Look at the results
```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

We can view these pathways with our geneset genes highlighted using the `pathview()` function. E.g. for "Asthma" I will use the pathway.id hsa05310 as seen above.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![My genes involved in Asthma pathway](hsa05310.pathview.png)
